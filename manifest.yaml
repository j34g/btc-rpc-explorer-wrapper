id:btcrpcexplorer
version: 1.0.0
title: BTC RPC Explorer
description:
  short: "A web-based Bitcoin blockchain explorer."
  long: "BTC RPC Explorer is a web-based explorer for the Bitcoin blockchain that connects to your node's RPC interface, ensuring privacy and control over your data."
release-notes: |
  - Initial release of BTC RPC Explorer for StartOS.
  - Includes basic functionality to explore Bitcoin blocks, transactions, and addresses.
license: MIT
wrapper-repo: "https://github.com/j34g/btc-rpc-explorer-wrapper"
upstream-repo: "https://github.com/janoside/btc-rpc-explorer"

# Defines the architectures supported by the service
hardware-requirements:
  arch:
    - amd64
    - arm64

# Specifies the main containerization entry point
main: 
  type: docker
  image: btc-rpc-explorer:latest
  entrypoint: npm start
  mounts:
    - name: data
      path: /data
  interfaces:
    - name: Web UI
      description: "Web UI for BTC RPC Explorer"
      ui: true
      protocol: http
      port: 3002

# Configures GPU acceleration (if applicable). Set to false by default.
gpu-acceleration: false

# Defines any health checks for the service
health-checks:
  web-ui:
    name: Web Interface
    success-message: BTC RPC Explorer is accessible
    type: script

# Defines persistent data volumes used by the service
volumes:
  main:
    type: data
    readonly: false
    source: /mnt/data/btc-rpc-explorer

# Describes network interfaces
interfaces:
  main:
    name: User Interface
    description: Web UI for BTC RPC Explorer
    tor-config:
      port-mapping:
        80: "3002"
    lan-config:
      443:
        ssl: true
        internal: 3002
    ui: true
    protocols:
      - tcp
      - http

# Specifies dependencies, if any. This is empty for now.
dependencies: {}

# Backup settings for the service, using the StartOS backup system
backup:
  create:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - create
      - /mnt/backup
      - /root/data
    mounts:
      BACKUP: "/mnt/backup"
      main: "/root/data"
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /mnt/backup
      - /root/data
    mounts:
      BACKUP: "/mnt/backup"
      main: "/root/data"

# Migration settings for handling upgrades from/to different versions
migrations:
  from:
    "*":
      type: script
      args: ["from"]
  to:
    "*":
      type: script
      args: ["to"]

